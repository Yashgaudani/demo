{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPFo1nP5adJRx0u59/ClFCI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Yashgaudani/demo/blob/main/sklearn_learning.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# LogisticRegression()\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import  LogisticRegression\n",
        "\n",
        "x = np.array([[25,30,0],[30,40,1],[20,35,0],[35,45,1]])\n",
        "y = np.array([0,1,0,1])\n",
        "x_train ,x_test, y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 42)\n",
        "\n",
        "model = LogisticRegression()\n",
        "model.fit(x_train,y_train)\n",
        "accrancy = model.score(x_test,y_test)\n",
        "print(f\"Model accurancy  : {accrancy}\")\n",
        "\n",
        "user_age = float(input(\"Enter the user age : \"))\n",
        "user_time_spent = float(input(\"Enter the user salary :\"))\n",
        "user_added_to_cart = int(input(\"Enter the user added to cart :\"))\n",
        "\n",
        "user_data = np.array([[user_age,user_time_spent,user_added_to_cart]])\n",
        "result = model.predict(user_data)\n",
        "\n",
        "if result[0] == 1:\n",
        "    print(\"User will buy the product\")\n",
        "else:\n",
        "    print(\"User will not buy the product\")"
      ],
      "metadata": {
        "id": "oEj-QJm5tDRb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "07b09956-9e6f-4247-a16d-7c9156426d04"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model accurancy  : 1.0\n",
            "Enter the user age : 25\n",
            "Enter the user salary :35000\n",
            "Enter the user added to cart :2\n",
            "User will buy the product\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Support vector machines"
      ],
      "metadata": {
        "id": "lEhjD_WI8GUO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# SVM(Support vector machines)\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score,classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# dataset\n",
        "data = {\n",
        "    \"age\" : [30,25,35,20,40,55,32,28],\n",
        "    \"Monthlycharge\" : [100,200,300,400,500,600,700,800],\n",
        "    \"Churn\" : [0,0,1,0,1,1,0,1]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "print(df)\n",
        "\n",
        "x= df[[\"age\",\"Monthlycharge\"]]\n",
        "y = df[\"Churn\"]\n",
        "\n",
        "x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 42)\n",
        "\n",
        "# Create a model\n",
        "model = SVC(kernel = \"linear\" , C = 1.0)       #default regularization c and karnel hota\n",
        "model.fit(x_train,y_train)\n",
        "y_pred = model.predict(x_test)\n",
        "\n",
        "# plt.plot(x_test,y_pred)\n",
        "# plt.show()\n",
        "\n",
        "accrancy = accuracy_score(y_test,y_pred)\n",
        "print(f\"Model accurancy  : {accrancy}\")\n",
        "\n",
        "report = classification_report(y_test,y_pred)\n",
        "print(report)\n",
        "\n",
        "\n",
        "# user testing\n",
        "user_age = float(input(\"Enter the user age : \"))\n",
        "user_Monthlycharge = float(input(\"Enter the user Monthlycharge :\"))\n",
        "\n",
        "user_data = np.array([[user_age,user_Monthlycharge]])\n",
        "result = model.predict(user_data)\n",
        "print(result)\n",
        "\n",
        "if result == 0:\n",
        "    print(\"Customer will not churn\")\n",
        "else:\n",
        "    print(\"Customer will churn\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CAw16-fZ8Lr6",
        "outputId": "75aee78c-ca68-4006-939f-aa8af6c742d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   age  Monthlycharge  Churn\n",
            "0   30            100      0\n",
            "1   25            200      0\n",
            "2   35            300      1\n",
            "3   20            400      0\n",
            "4   40            500      1\n",
            "5   55            600      1\n",
            "6   32            700      0\n",
            "7   28            800      1\n",
            "Model accurancy  : 1.0\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00         1\n",
            "           1       1.00      1.00      1.00         1\n",
            "\n",
            "    accuracy                           1.00         2\n",
            "   macro avg       1.00      1.00      1.00         2\n",
            "weighted avg       1.00      1.00      1.00         2\n",
            "\n",
            "Enter the user age : 30\n",
            "Enter the user Monthlycharge :300\n",
            "[0]\n",
            "Customer will not churn\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " K - Nearest Neighbors (KNN)"
      ],
      "metadata": {
        "id": "0rh30j8IfOU5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# KNeighborsClassifier\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score,classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Dateset\n",
        "data = np.array([[25,5000,2],[30,80000,1],[35,60000,3],[20,30000,2],[40,90000,1],[45,70000,2]])\n",
        "labels = np.array([0,0,1,2,1,2])  # 0:low , 1:medium , 2 :high\n",
        "\n",
        "df = pd.DataFrame(data,columns = [\"age\",\"salary\",\"purchased\"])\n",
        "print(df)\n",
        "\n",
        "x_train,x_test,y_train,y_test = train_test_split(data,labels,test_size = 0.2,random_state = 42)\n",
        "scaler = StandardScaler( )\n",
        "scaler.fit(x_train)\n",
        "x_train = scaler.transform(x_train)\n",
        "x_test = scaler.transform(x_test)\n",
        "\n",
        "# Create a model\n",
        "model = KNeighborsClassifier(n_neighbors = 3)\n",
        "model.fit(x_train,y_train)\n",
        "y_pred = model.predict(x_test)\n",
        "\n",
        "accrancy = accuracy_score(y_test,y_pred)\n",
        "print(f\"Model accurancy  : {accrancy}\")\n",
        "\n",
        "\n",
        "# user testing\n",
        "user_input = np.array([[30,30000,1]])\n",
        "user_input_sacled = scaler.transform(user_input)\n",
        "result = model.predict(user_input_sacled)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WfGwUVwHfYwq",
        "outputId": "df5cdb20-44e9-4717-f8cd-3a0db223680d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   age  salary  purchased\n",
            "0   25    5000          2\n",
            "1   30   80000          1\n",
            "2   35   60000          3\n",
            "3   20   30000          2\n",
            "4   40   90000          1\n",
            "5   45   70000          2\n",
            "Model accurancy  : 0.0\n",
            "[1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Naive bayes\n",
        "\n",
        "import numpy as np\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Dataset\n",
        "rebview = [\"The product is excellent and works perfect\",\n",
        "           \"The product is not good,very disappinting\",\n",
        "           \"Terrible product and waste of monry\",\n",
        "           \"I love this product andd it is amazing\"]\n",
        "sentimes = np.array([1,0,0,1])\n",
        "\n",
        "vectorizer = CountVectorizer()\n",
        "X = vectorizer.fit_transform(rebview)\n",
        "\n",
        "classifiwer = MultinomialNB()\n",
        "classifiwer.fit(X,sentimes)\n",
        "\n",
        "def classification(review):\n",
        "  review_vectorized = vectorizer.transform([review])\n",
        "  result = classifiwer.predict(review_vectorized)\n",
        "  if result[0] == 1:\n",
        "    print(\"Positive\")\n",
        "  else:\n",
        "    print(\"Negative\")\n",
        "\n",
        "# user testing\n",
        "user_input = input(\"Enter the review : \")\n",
        "result = classification(user_input)\n",
        "print(f\"The review {user_input} is classified as {result}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vwv9cGyDjmEM",
        "outputId": "60c686df-3340-4096-c7db-32c461765453"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the review : gaudani yash is good\n",
            "Negative\n",
            "The review gaudani yash is good is classified as None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hm6bO1V0sEcO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decision Tree"
      ],
      "metadata": {
        "id": "_sTxPeQpulzJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Decision Tree\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score,classification_report\n",
        "\n",
        "# Dataset\n",
        "x =np.array([[25,50000,1],[35,90000,2],[40,60000,5],[45,80000,3],[20,30000,2],[55,120000,4],[28,40000,1],[32,100000,3],[38,75000,2]])\n",
        "y =np.array([0,1,0,1,0,0,1,0,1])\n",
        "\n",
        "X_train,X_test,Y_train,Y_test  =  train_test_split(x,y,test_size = 0.2,random_state = 42)\n",
        "\n",
        "model  =  DecisionTreeClassifier()\n",
        "model.fit(X_train,Y_train)\n",
        "\n",
        "\n",
        "y_pred  =  model.predict(X_test)\n",
        "\n",
        "accuracy  = accuracy_score(Y_test,y_pred)\n",
        "print(accuracy)\n",
        "\n",
        "#user testing\n",
        "\n",
        "age = float(input(\"Enter the age :\"))\n",
        "income = float(input(\"Enter Income :\"))\n",
        "education = float(input(\"Enter the Education Level : \"))\n",
        "user_input = np.array([[age,income,education]])\n",
        "prediction  =  model.predict(user_input)\n",
        "\n",
        "if prediction[0] == 1 :\n",
        "  print(\"The user is liker to purchase a smartphone\")\n",
        "else:\n",
        "  print(\"The user is unlikely to puechase a smartphone\")"
      ],
      "metadata": {
        "id": "N21Ndp84urGz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bdba110e-d495-471a-b078-69e57c9ceffc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5\n",
            "Enter the age :25\n",
            "Enter Income :120000\n",
            "Enter the Education Level : 3\n",
            "The user is unlikely to puechase a smartphone\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Rnadom forest classifier\n",
        "'''user a random forest classifier to predict whether a person is lokely to purchase a product based on certain fertures like age,gender, abd estimated salary. '''\n",
        "#step no 1\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "#step no 3\n",
        "\n",
        "date = {\n",
        "    \"age\"  :  [25,42,62,42,25,10,25,26,58,9],\n",
        "     \"Gender\" : [\"M\",\"F\",\"M\",\"F\",\"M\",\"F\",\"M\",\"F\",\"M\",\"F\"],\n",
        "     \"Estimatedsalary\" : [30000,40000,50000,60000,70000,80000,90000,100000,110000,120000],\n",
        "    \"Purchased\" : [1,0,1,0,1,0,1,0,1,0]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(date)\n",
        "print(df)\n",
        "\n",
        "Label_encode  =  LabelEncoder()\n",
        "df['Gender'] = Label_encode.fit_transform(df[\"Gender\"])\n",
        "\n",
        "x = df.drop(\"Purchased\" , axis = 1)\n",
        "y = df[\"Purchased\"]\n",
        "\n",
        "X_train,X_test,y_train,y_test  = train_test_split(x,y,test_size=0.2,random_state=42)\n",
        "rf_classifier = RandomForestClassifier(n_estimators=100,random_state=42)\n",
        "rf_classifier.fit(X_train,y_train)\n",
        "\n",
        "y_pred = rf_classifier.predict(X_test)\n",
        "accuracy = accuracy_score(y_test,y_pred)\n",
        "print(f\"accuracy of random forest : { accuracy}\")\n",
        "\n",
        "#user testing\n",
        "user_age = int(input(\"Enter your age: \"))\n",
        "user_gender = input(\"Enter your gender M/F : \")\n",
        "user_salary = int(input(\"Enter your salary :\"))\n",
        "\n",
        "user_gender_encoded  =  Label_encode.transform([user_gender])[0]\n",
        "user_data = [[user_age,user_gender_encoded,user_salary]]\n",
        "\n",
        "prediction  = rf_classifier.predict(user_data)\n",
        "\n",
        "if prediction[0] == 1 :\n",
        "  print(\"The person is likely to purchaed the product.\")\n",
        "\n",
        "else:\n",
        "  print(\"This person in not likely to purched the product.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2dD3NEWoi9V9",
        "outputId": "f3de54ba-b0a5-4f39-cf20-730083918c64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   age Gender  Estimatedsalary  Purchased\n",
            "0   25      M            30000          1\n",
            "1   42      F            40000          0\n",
            "2   62      M            50000          1\n",
            "3   42      F            60000          0\n",
            "4   25      M            70000          1\n",
            "5   10      F            80000          0\n",
            "6   25      M            90000          1\n",
            "7   26      F           100000          0\n",
            "8   58      M           110000          1\n",
            "9    9      F           120000          0\n",
            "accuracy of random forest : 1.0\n",
            "Enter your age: 30\n",
            "Enter your gender M/F : M\n",
            "Enter your salary :80000\n",
            "The person is likely to purchaed the product.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gradlient boosting\n",
        "\n",
        "''' Create a predictive model using gradient boosting to forecast housing prices based on various festures such as square footage, number of bedrooms number of bathrooms and location'''\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "#step no 2\n",
        "\n",
        "data = {\n",
        "    \"squareFootage\" : [1500,2000,1200,1800,1350],\n",
        "    \"bedrooms\" : [3,4,2,3,3,],\n",
        "    \"bathrooms\" : [2,2,5,1,5],\n",
        "    \"location\" : [\"suburd\" , \"city\",\"rural\",\"city\",\"suburd\"],\n",
        "    \"price\"  : [250000,300000,1800000,2800000,2200000]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "print(df)\n",
        "\n",
        "#converting the location column to dumny\n",
        "\n",
        "df = pd.get_dummies(df,columns=[\"location\"])\n",
        "\n",
        "x = df.drop(\"price\",axis = 1 )\n",
        "y = df[\"price\"]\n",
        "\n",
        "x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n",
        "\n",
        "model = GradientBoostingRegressor()\n",
        "model.fit(x_train,y_train)\n",
        "\n",
        "y_pred = model.predict(x_test)\n",
        "mse = mean_squared_error(y_test,y_pred)\n",
        "print(mse)\n",
        "\n",
        "print(\"Enter the details for ouser prediction:\")\n",
        "sq_footage = float(input(\"square footage:\"))\n",
        "bedrooms = int(input(\"Number of bedrooms: \"))\n",
        "bathrooms = float(input(\"Numbers of bathroom : \" ))\n",
        "location = input(\"Location (suburb/city/rural) : \")\n",
        "\n",
        "\n",
        "input_location = [0,0,0]\n",
        "if location  == \"suburd\" :\n",
        "  input_location[0]  == 1\n",
        "elif location == \"city\" :\n",
        "  input_location[1] == 1\n",
        "elif location == \"rural\":\n",
        "  input_location[2] == 1\n",
        "\n",
        "#user testing\n",
        "user_input =  pd.DataFrame({\n",
        "    \"squareFootage\" : [sq_footage],\n",
        "    \"bedrooms\" : [bedrooms],\n",
        "    \"bathrooms\" : [bathrooms],\n",
        "    \"location_city\" : [input_location[1]],\n",
        "      \"location_rural\" : [input_location[2]],\n",
        "           \"location_suburd\" : [input_location[0]]\n",
        "                          })\n",
        "\n",
        "\n",
        "#make the prediction\n",
        "predicted_price = model.predict(user_input)\n",
        "print(f\"predicted price for the houser : { predicted_price[0]}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YcdaLL-go1LB",
        "outputId": "88162a56-9f94-4fe2-86f5-d2fe3950754e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   squareFootage  bedrooms  bathrooms location    price\n",
            "0           1500         3          2   suburd   250000\n",
            "1           2000         4          2     city   300000\n",
            "2           1200         2          5    rural  1800000\n",
            "3           1800         3          1     city  2800000\n",
            "4           1350         3          5   suburd  2200000\n",
            "3015276937422.09\n",
            "Enter the details for ouser prediction:\n",
            "square footage:2000\n",
            "Number of bedrooms: 5\n",
            "Numbers of bathroom : 3\n",
            "Location (suburb/city/rural) : rural\n",
            "predicted price for the houser : 816742.5609175991\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Neural Network for machine learning\n",
        "\n",
        "''' You are tasked with creating a neural network network model to predict whether a student\n",
        "     will pass or fail an exam basewd on two features hours studied and previous exam scored. The dataset should contains information on hours studied and previous exam score for a group of student, along with their exam outcomes(pass or fail)'''\n",
        "\n",
        "#step no 1\n",
        "import numpy as np\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "#step no 2\n",
        "\n",
        "hours_studied = [2.5,1.5,3.0,1.8,4.0,2.0,3.5,2.7]\n",
        "prev_exam_score = [80,70,7.5,60,85,80,90,65]\n",
        "exam_outcome = [\"pass\",\"fail\",\"pass\",'fail',\"pass\",\"fail\",\"pass\",\"fail\"]\n",
        "\n",
        "#step no 3\n",
        "\n",
        "label_encoder = LabelEncoder()\n",
        "encoded_exam_outcome = label_encoder.fit_transform(exam_outcome)\n",
        "\n",
        "#step no 4\n",
        "\n",
        "X = np.column_stack((hours_studied ,prev_exam_score))\n",
        "y = encoded_exam_outcome\n",
        "\n",
        "#step no 5\n",
        "clf = MLPClassifier(hidden_layer_sizes = (4,),activation = \"logistic\" , max_iter = 1000,random_state = 42)\n",
        "clf.fit(X,y)\n",
        "\n",
        "# step no 6  - inputting some example data\n",
        "\n",
        "new_student_data = np.array([[2.0,8]])  #hours studied and previous exam score\n",
        "\n",
        "#step no 7\n",
        "predicted_outcome = clf.predict(new_student_data)\n",
        "\n",
        "#step no 8\n",
        "\n",
        "predicted_outcome_decode = label_encoder.inverse_transform(predicted_outcome)\n",
        "\n",
        "#step no 9\n",
        "print(\"predicted exam outcome for the new student : {}\".format(predicted_outcome_decode[0]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gAMsYdGwQxyg",
        "outputId": "b76b6373-64b0-43bd-a52e-9e7d4abebd41"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "predicted exam outcome for the new student : pass\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# K means Clustering algorithm\n",
        "''' A mall wants to understand its customer base better to impove its\n",
        "    marketing strategy. The goal is to cluster cusatomer into groups based\n",
        "    on their annual income and spending score , so the marketing team can\n",
        "    tailor their campaings to each cluters perferences and behaviors.'''\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "\n",
        "#generate data set\n",
        "\n",
        "np.random.seed(42)\n",
        "data = {\n",
        "    \"annualincome\" : np.random.randint(30000,100000,100),\n",
        "    \"spendingscore\" : np.random.randint(1,100,100)\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "print(df)\n",
        "\n",
        "plt.scatter(df[\"annualincome\"],df[\"spendingscore\"])\n",
        "plt.title(\"Customer Data - Annual\")\n",
        "plt.xlabel(\"Annualincome\")\n",
        "plt.ylabel(\"Spendingscore\")\n",
        "plt.show()\n",
        "\n",
        "X = df.values\n",
        "kmeans = KMeans(n_clusters=3,random_state=42)\n",
        "df[\"Cluster\"] = kmeans.fit_predict(X)\n",
        "\n",
        "print(df)\n",
        "\n",
        "plt.scatter(df[\"annualincome\"],df[\"spendingscore\"],c=df[\"Cluster\"],cmap = \"rainbow\")\n",
        "plt.title(\"KMeans clisting  -anual income and specnding score\")\n",
        "plt.xlabel(\"Annualincome\")\n",
        "plt.ylabel(\"Spendingscore\")\n",
        "plt.show()\n",
        "\n",
        "#user input\n",
        "user_input = {\"Annualincome\" : [75000],\n",
        "              \"spendingscore\" : [51]}\n",
        "user_df = pd.DataFrame(user_input)\n",
        "user_cluster = kmeans.predict(user_df)\n",
        "print(f\"The user belongs to cluster { user_cluster[0]}\")\n",
        "\n",
        "print(df.head())"
      ],
      "metadata": {
        "id": "khNpsO6ihJF3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "47b038ee-874d-4ab2-b461-b75fe094bd42"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    annualincome  spendingscore\n",
            "0          45795             51\n",
            "1          30860             63\n",
            "2          84886             96\n",
            "3          36265             52\n",
            "4          67194             96\n",
            "..           ...            ...\n",
            "95         82992             97\n",
            "96         36910             73\n",
            "97         30206             59\n",
            "98         53419             70\n",
            "99         80636             80\n",
            "\n",
            "[100 rows x 2 columns]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    annualincome  spendingscore  Cluster\n",
            "0          45795             51        1\n",
            "1          30860             63        1\n",
            "2          84886             96        2\n",
            "3          36265             52        1\n",
            "4          67194             96        0\n",
            "..           ...            ...      ...\n",
            "95         82992             97        2\n",
            "96         36910             73        1\n",
            "97         30206             59        1\n",
            "98         53419             70        0\n",
            "99         80636             80        2\n",
            "\n",
            "[100 rows x 3 columns]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The user belongs to cluster 0\n",
            "   annualincome  spendingscore  Cluster\n",
            "0         45795             51        1\n",
            "1         30860             63        1\n",
            "2         84886             96        2\n",
            "3         36265             52        1\n",
            "4         67194             96        0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but KMeans was fitted without feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Hierarchical Agglomerative clustering\n",
        "\n",
        "'''you are the data scientist at a retail company and the marketing team is looking to optimize their promotional campaigns by trageting specific customer segments.The goal is to identify distinct groups of customers based on their demograpgics information such as age ,income,and spending score.'''\n",
        "#solution : Agglomerative Hierarchical Clustering\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import AgglomerativeClustering\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "#dataset creation\n",
        "np.random.seed(42)\n",
        "data = pd.DataFrame({\n",
        "    \"age\" : np.random.randint(18,65,100),\n",
        "    \"income\" : np.random.randint(30000,100000,100),\n",
        "    \"spendingscore\" : np.random.randint(1,100,100)\n",
        "})\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(data)\n",
        "data_scaled = scaler.transform(data)\n",
        "\n",
        "#clustering\n",
        "model = AgglomerativeClustering(n_clusters=3,affinity=\"euclidean\",linkage=\"ward\")\n",
        "data[\"Cluster\"] = model.fit_predict(data_scaled)\n",
        "\n",
        "#visulazation\n",
        "\n",
        "plt.scatter(data[\"income\"],data[\"spendingscore\"],c= data[\"Cluster\"] , cmap = \"viridis\")\n",
        "plt.title(\"Customer Data - Annual\")\n",
        "plt.xlabel(\"income\")\n",
        "plt.ylabel(\"Spendingscore\")\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# user input\n",
        "\n",
        "new_customer = pd.DataFrame({\n",
        "    \"age\" : [30],\n",
        "    \"income\" : [50000],\n",
        "    \"spendingscore\" : [50]\n",
        "})\n",
        "new_customer_scaled = scaler.transform(new_customer)\n",
        "new_customer_cluster = model.fit_predict(new_customer_scaled)\n",
        "print(f\"The new customer belongs to cluster {new_customer_cluster[0]}\")\n"
      ],
      "metadata": {
        "id": "I0-Fid6-xSlS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 866
        },
        "outputId": "aae90bff-ac5c-49b7-f9c1-ebe5d9ff434a"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_agglomerative.py:983: FutureWarning: Attribute `affinity` was deprecated in version 1.2 and will be removed in 1.4. Use `metric` instead\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Found array with 1 sample(s) (shape=(1, 3)) while a minimum of 2 is required by AgglomerativeClustering.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-b52d6c9e5a12>\u001b[0m in \u001b[0;36m<cell line: 45>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     43\u001b[0m })\n\u001b[1;32m     44\u001b[0m \u001b[0mnew_customer_scaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_customer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m \u001b[0mnew_customer_cluster\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_customer_scaled\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"The new customer belongs to cluster {new_customer_cluster[0]}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_agglomerative.py\u001b[0m in \u001b[0;36mfit_predict\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m   1097\u001b[0m             \u001b[0mCluster\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1098\u001b[0m         \"\"\"\n\u001b[0;32m-> 1099\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_predict\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    751\u001b[0m         \u001b[0;31m# non-optimized default implementation; override when a better\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    752\u001b[0m         \u001b[0;31m# method is possible for a given clustering algorithm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 753\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    754\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    755\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_agglomerative.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    953\u001b[0m         \"\"\"\n\u001b[1;32m    954\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 955\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_min_samples\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    956\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    957\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    563\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    564\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 565\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"X\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    566\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    567\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    929\u001b[0m         \u001b[0mn_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mn_samples\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mensure_min_samples\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 931\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    932\u001b[0m                 \u001b[0;34m\"Found array with %d sample(s) (shape=%s) while a\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m                 \u001b[0;34m\" minimum of %d is required%s.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Found array with 1 sample(s) (shape=(1, 3)) while a minimum of 2 is required by AgglomerativeClustering."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# DBSCAN Clusting\n",
        "''' Imaging you are working for an e-commerce company , and the marketing team wants to target custmers more\n",
        "     effectively by creating segments based on their purchasing behavior. however , traditinal segmentation\n",
        "     method are not providing satisfactory resilts.'''\n",
        "# solution: (Density basedd spatial clustering of application with noise)\n",
        "# use DBSCAN to identfy cluster of customer with similar purchasing patterns.\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import DBSCAN\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "np.random.seed(42)\n",
        "data = np.random.rand(100,2)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(data)\n",
        "data_scaled = scaler.transform(data)\n",
        "\n",
        "# apply DBSCAN\n",
        "\n",
        "dbscan = DBSCAN(eps=0.2,min_samples=5)\n",
        "cluster = dbscan.fit_predict(data_scaled)\n",
        "print(cluster)\n",
        "# visulaize\n",
        "\n",
        "plt.scatter(data[:,0],data[:,1],c=cluster,cmap = \"viridis\",marker = \"o\" , s = 50)\n",
        "plt.title(\"DBSCAN cluster\")\n",
        "plt.xlabel(\"Freature 1 \")\n",
        "plt.ylabel(\"Freature 2\")\n",
        "plt.show()\n",
        "\n",
        "\n",
        "result_df = pd.DataFrame(data,columns = [\"feature1\",\"feature2\"])\n",
        "result_df[\"cluster\"] = cluster\n",
        "print(result_df)\n",
        "\n",
        "print(\"Number of cluster:\" , len(np.unique(cluster)))\n",
        "print(\"Size of each cluster:\")\n",
        "print(result_df[\"cluster\"].value_counts())\n",
        "\n",
        "\n",
        "# model testing user input\n",
        "\n",
        "user_input = np.array([[0.5,0.5]])\n",
        "user_input_scaled = scaler.transform(user_input)\n",
        "user_cluster = dbscan.fit_predict(user_input_scaled)\n",
        "\n",
        "print(f\"The user belongs to cluster {user_cluster[0]}\")"
      ],
      "metadata": {
        "id": "zv3EzRdu4G0_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 923
        },
        "outputId": "4415f92a-768e-4a21-a085-2c86c6e810a9"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0 -1  0 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            "  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    feature1  feature2  cluster\n",
            "0   0.374540  0.950714       -1\n",
            "1   0.731994  0.598658       -1\n",
            "2   0.156019  0.155995       -1\n",
            "3   0.058084  0.866176       -1\n",
            "4   0.601115  0.708073       -1\n",
            "..       ...       ...      ...\n",
            "95  0.093103  0.897216       -1\n",
            "96  0.900418  0.633101       -1\n",
            "97  0.339030  0.349210       -1\n",
            "98  0.725956  0.897110       -1\n",
            "99  0.887086  0.779876       -1\n",
            "\n",
            "[100 rows x 3 columns]\n",
            "Number of cluster: 2\n",
            "Size of each cluster:\n",
            "cluster\n",
            "-1    94\n",
            " 0     6\n",
            "Name: count, dtype: int64\n",
            "The user belongs to cluster -1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gaussian mixture model\n",
        "\n",
        "''' AS a retail business owner,you want to understand and categorize\n",
        "    your customers into distinct segments based on their purchasaing behavior\n",
        "    This segmentation will help ypu tailor marketing strategies and\n",
        "    promotions to different customer groups,ultimately maximizing sales\n",
        "    and customer satisfaction'''\n",
        "\n",
        "# Solution using Gaussian Mixture Model (GMM)\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.mixture import GaussianMixture\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "#dataset\n",
        "\n",
        "np.random.seed(42)\n",
        "segment_1 = np.random.normal(loc=30,scale = 5,size =100)\n",
        "segment_2 = np.random.normal(loc=60,scale = 10,size =150)\n",
        "segment_3 = np.random.normal(loc=90,scale = 8,size =120)\n",
        "\n",
        "data = np.concatenate([segment_1,segment_2,segment_3]).reshape(-1,1)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(data)\n",
        "data_scaled = scaler.transform(data)\n",
        "\n",
        "n_components = 3\n",
        "gmm = GaussianMixture(n_components = n_components,random_state = 42)\n",
        "gmm.fit(data_scaled)\n",
        "\n",
        "#prediction\n",
        "cluster_label = gmm.predict(data_scaled)\n",
        "\n",
        "# visulaize\n",
        "\n",
        "plt.scatter(data,np.zeros_like(data),c=cluster_label,cmap = \"viridis\",marker = \"o\" , s = 50)\n",
        "plt.title(\"cluster Segmentation\")\n",
        "plt.xlabel(\"purchase Amount \")\n",
        "plt.show()\n",
        "\n",
        "# user testing\n",
        "\n",
        "user_input = float(input(\"Enter the review : \"))\n",
        "user_input_scaled = scaler.transform(np.array([[user_input]]))\n",
        "user_cluster = gmm.predict(user_input_scaled.reshape(-1,1))[0]\n",
        "\n",
        "print(f\"The predicted customer segmnet for a purchase amount of {user_input} is : {user_cluster + 1}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "2yEhEcape4cv",
        "outputId": "93f03147-55b7-4f0c-8ad7-9a6a12598363"
      },
      "execution_count": 19,
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the review : 100\n",
            "The predicted customer segmnet for a purchase amount of 100.0 is : 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4wicbQ2olXsB"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}